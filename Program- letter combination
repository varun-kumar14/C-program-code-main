def letterCombinations(digits):
    if not digits:
        return []

    mapping = {
        '2': 'abc',
        '3': 'def',
        '4': 'ghi',
        '5': 'jkl',
        '6': 'mno',
        '7': 'pqrs',
        '8': 'tuv',
        '9': 'wxyz'
    }

    def backtrack(index, path):
        if index == len(digits):
            combinations.append("".join(path))
            return

        current_digit = digits[index]
        for letter in mapping[current_digit]:
            path.append(letter)
            backtrack(index + 1, path)
            path.pop()

    combinations = []
    backtrack(0, [])
    return combinations

# Example usage:
digits1 = "23"
result1 = letterCombinations(digits1)
print(result1)  # Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]

digits2 = ""
result2 = letterCombinations(digits2)
print(result2)  # Output: []
